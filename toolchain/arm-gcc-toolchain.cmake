#
# Toolchain file
#

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ARM)

if(MINGW OR CYGWIN OR WIN32)
    set(UTIL_SEARCH_CMD where)
elseif(UNIX OR APPLE)
    set(UTIL_SEARCH_CMD which)
endif()

set(TOOLCHAIN_PREFIX arm-none-eabi-)

execute_process(
  COMMAND ${UTIL_SEARCH_CMD} ${TOOLCHAIN_PREFIX}gcc
  OUTPUT_VARIABLE BINUTILS_PATH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

get_filename_component(ARM_TOOLCHAIN_DIR ${BINUTILS_PATH} DIRECTORY)
get_filename_component(TOOLCHAIN_INLUDES ${ARM_TOOLCHAIN_DIR} DIRECTORY)

# Without that flag CMake is not able to pass test compilation check
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_EXE_LINKER_FLAGS_INIT "--specs=nosys.specs")

set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_C_STANDARD 11)

set(CMAKE_OBJCOPY ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}size CACHE INTERNAL "size tool")

set(CMAKE_SYSROOT ${TOOLCHAIN_INLUDES}/arm-none-eabi)
set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_INLUDES})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

#--------------------
# C flags
#--------------------
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-std=c11")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "--specs=nano.specs")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-c")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-mcpu=cortex-m3")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-O0")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-mthumb")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-Wall")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-msoft-float")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-fdata-sections")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-ffunction-sections")
set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-Wno-unused-but-set-variable")

if(CMAKE_BUILD_TYPE MATCHES Debug)
  set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-g3")
  set(TARGET_COMPILE_OPTIONS ${TARGET_COMPILE_OPTIONS} "-gdwarf-4")
endif()

add_compile_options(${TARGET_COMPILE_OPTIONS})

#--------------------
# Defines
#--------------------
set(TARGET_DEFINITION_OPTIONS ${TARGET_DEFINITION_OPTIONS} "-DSTM32F105xC")
set(TARGET_DEFINITION_OPTIONS ${TARGET_DEFINITION_OPTIONS} "-DSTM32F1")
set(TARGET_DEFINITION_OPTIONS ${TARGET_DEFINITION_OPTIONS} "-D__NEWLIB__")

if(CMAKE_BUILD_TYPE MATCHES Debug)
  set(TARGET_DEFINITION_OPTIONS ${TARGET_DEFINITION_OPTIONS} "-DDEBUG")
endif()

add_definitions(${TARGET_DEFINITION_OPTIONS})

#--------------------
# Assembly flags
#--------------------
set(CMAKE_ASM_FLAGS ${CMAKE_ASM_FLAGS} "-x assembler-with-cpp")

#--------------------
# Linker flags
#--------------------
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-nostartfiles")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-mthumb")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-mcpu=cortex-m3")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "--specs=nano.specs")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-static")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group)
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-Xlinker")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "--gc-sections")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-Wl,--cref")
set(TARGET_LINK_OPTIONS ${TARGET_LINK_OPTIONS} "-Wl,--print-memory-usage")

add_link_options(${TARGET_LINK_OPTIONS})
